// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/iplist.proto

package iplist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IplistService_CreateIplist_FullMethodName = "/proto.IplistService/CreateIplist"
)

// IplistServiceClient is the client API for IplistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IplistServiceClient interface {
	CreateIplist(ctx context.Context, in *NewIplist, opts ...grpc.CallOption) (*Iplist, error)
}

type iplistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIplistServiceClient(cc grpc.ClientConnInterface) IplistServiceClient {
	return &iplistServiceClient{cc}
}

func (c *iplistServiceClient) CreateIplist(ctx context.Context, in *NewIplist, opts ...grpc.CallOption) (*Iplist, error) {
	out := new(Iplist)
	err := c.cc.Invoke(ctx, IplistService_CreateIplist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IplistServiceServer is the server API for IplistService service.
// All implementations must embed UnimplementedIplistServiceServer
// for forward compatibility
type IplistServiceServer interface {
	CreateIplist(context.Context, *NewIplist) (*Iplist, error)
	mustEmbedUnimplementedIplistServiceServer()
}

// UnimplementedIplistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIplistServiceServer struct {
}

func (UnimplementedIplistServiceServer) CreateIplist(context.Context, *NewIplist) (*Iplist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIplist not implemented")
}
func (UnimplementedIplistServiceServer) mustEmbedUnimplementedIplistServiceServer() {}

// UnsafeIplistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IplistServiceServer will
// result in compilation errors.
type UnsafeIplistServiceServer interface {
	mustEmbedUnimplementedIplistServiceServer()
}

func RegisterIplistServiceServer(s grpc.ServiceRegistrar, srv IplistServiceServer) {
	s.RegisterService(&IplistService_ServiceDesc, srv)
}

func _IplistService_CreateIplist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIplist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IplistServiceServer).CreateIplist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IplistService_CreateIplist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IplistServiceServer).CreateIplist(ctx, req.(*NewIplist))
	}
	return interceptor(ctx, in, info, handler)
}

// IplistService_ServiceDesc is the grpc.ServiceDesc for IplistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IplistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IplistService",
	HandlerType: (*IplistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIplist",
			Handler:    _IplistService_CreateIplist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/iplist.proto",
}
